name: build

on:
  workflow_call:
    inputs:
      version:
        required: true
        type: string

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        job:
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-gnu
          - runner: ubuntu-24.04
            target: x86_64-unknown-linux-musl
          - runner: ubuntu-24.04
            target: aarch64-unknown-linux-gnu
          - runner: ubuntu-24.04
            target: aarch64-unknown-linux-musl
          - runner: windows-2022
            target: x86_64-pc-windows-msvc
          - runner: windows-2022
            target: x86_64-pc-windows-gnu
          - runner: windows-2022
            target: aarch64-pc-windows-msvc
          - runner: macos-13
            target: x86_64-apple-darwin
          - runner: macos-14
            target: aarch64-apple-darwin
            
    runs-on: ${{ matrix.job.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ./target/
          key: ${{ matrix.job.target }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ matrix.job.target }}-

      - name: Setup rust
        run: rustup target add ${{ matrix.job.target }}

      - name: Setup compiler for Linux
        if: contains(matrix.job.target, 'linux')
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq --no-install-recommends clang

      - name: Setup cross compiler for Linux
        if: startsWith(matrix.job.target, 'aarch64') && contains(matrix.job.target, 'linux')
        run: sudo apt-get install -qq --no-install-recommends crossbuild-essential-arm64

      - name: Setup mold linker
        uses: rui314/setup-mold@v1
      
      - name: Set cargo config
        if: contains(matrix.job.target, 'linux')
        run: |
          mkdir -p .cargo
          cat <<EOF > .cargo/config.toml
          [target.'cfg(all(target_arch = "x86_64", target_os = "linux"))']
          linker = "clang"
          rustflags = [
            "-C",
            "link-arg=-fuse-ld=mold",
            "-C",
            "link-args=-target x86_64-unknown-linux-gnu",
          ]

          [target.'cfg(all(target_arch = "aarch64", target_os = "linux"))']
          linker = "clang"
          rustflags = [
            "-C",
            "link-arg=-fuse-ld=mold",
            "-C",
            "link-args=-target aarch64-unknown-linux-gnu",
          ]
          EOF

      - name: Build
        run: cargo build --release --target ${{ matrix.job.target }}

      - name: tar archive
        id: archive
        shell: bash
        run: |
          if "${{ startsWith(matrix.job.runner, 'windows') }}"; then
            FILENAME="snails-machine-${{ inputs.version }}-${{ matrix.job.target }}.zip"
            7z a ${FILENAME} ./target/${{ matrix.job.target }}/release/snails-machine.exe
          else
            FILENAME="snails-machine-${{ inputs.version }}-${{ matrix.job.target }}.tar.gz"
            if "${{ startsWith(matrix.job.runner, 'macos') }}"; then
              gtar czf ${FILENAME} -C ./target/${{ matrix.job.target }}/release ./snails-machine
            else
              tar czf ${FILENAME} -C ./target/${{ matrix.job.target }}/release ./snails-machine
            fi
          fi
          echo "filename=${FILENAME}" >> GITHUB_OUTPUT

      - name: Save tar artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.version }}-${{ matrix.job.target }}
          path: ./${{ steps.archive.outputs.filename }}


        